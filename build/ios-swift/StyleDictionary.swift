
//
// StyleDictionary.swift
//

// Do not edit directly
<<<<<<< HEAD
// Generated on Tue, 13 Jul 2021 17:24:51 GMT
//
=======
// Generated on Sun, 11 Jul 2021 14:36:17 GMT
>>>>>>> c59d42e64e1946492a29b26eb85f5636e8a20461


import UIKit

public class StyleDictionary {
<<<<<<< HEAD
    public static let darkElevationShadow01Color = rgba(28, 27, 34, 0.5)
    public static let darkElevationShadow01OffsetX = 0
    public static let darkElevationShadow01OffsetY = 2
    public static let darkElevationShadow01Radius = 6
    public static let darkElevationShadow01Spread = 0
    public static let darkElevationShadow01Type = dropShadow
    public static let darkElevationShadow02Color = rgba(28, 27, 34, 0.5)
    public static let darkElevationShadow02OffsetX = 0
    public static let darkElevationShadow02OffsetY = 2
    public static let darkElevationShadow02Radius = 14
    public static let darkElevationShadow02Spread = 0
    public static let darkElevationShadow02Type = dropShadow
    public static let darkElevationShadow03Color = rgba(28, 27, 34, 0.5)
    public static let darkElevationShadow03OffsetX = 0
    public static let darkElevationShadow03OffsetY = 1
    public static let darkElevationShadow03Radius = 2
    public static let darkElevationShadow03Spread = 0
    public static let darkElevationShadow03Type = dropShadow
    public static let darkElevationShadowSwitchColor = rgba(58, 57, 68, 0.2)
    public static let darkElevationShadowSwitchOffsetX = 0
    public static let darkElevationShadowSwitchOffsetY = 0
    public static let darkElevationShadowSwitchRadius = 2
    public static let darkElevationShadowSwitchSpread = 0
    public static let darkElevationShadowSwitchType = dropShadow
    public static let desktopDarkBorderColorContextMenu = rgba(58, 57, 68, 1)
    public static let desktopDarkBorderColorPanel = rgba(82, 82, 94, 1)
    public static let desktopDarkBorderColorUiComponent = rgba(143, 143, 157, 1)
    public static let desktopDarkBorderColorZapGradientType = linear
    public static let desktopDarkBorderColorZapOpacity = 1
    public static let desktopDarkBorderColorZapStops0Color = rgba(144, 89, 255, 1)
    public static let desktopDarkBorderColorZapStops0Position = 0
    public static let desktopDarkBorderColorZapStops1Color = rgba(255, 74, 162, 1)
    public static let desktopDarkBorderColorZapStops1Position = 0.52
    public static let desktopDarkBorderColorZapStops2Color = rgba(255, 189, 79, 1)
    public static let desktopDarkBorderColorZapStops2Position = 1
    public static let desktopDarkButtonColorBackgroundError = rgba(226, 40, 80, 1)
    public static let desktopDarkButtonColorBackgroundErrorActive = rgba(129, 2, 32, 1)
    public static let desktopDarkButtonColorBackgroundErrorDisabled = rgba(226, 40, 80, 0.4)
    public static let desktopDarkButtonColorBackgroundErrorHover = rgba(197, 0, 66, 1)
    public static let desktopDarkButtonColorBackgroundPrimary = rgba(0, 221, 255, 1)
    public static let desktopDarkButtonColorBackgroundPrimaryActive = rgba(170, 242, 255, 1)
    public static let desktopDarkButtonColorBackgroundPrimaryDisabled = rgba(0, 221, 255, 0.4)
    public static let desktopDarkButtonColorBackgroundPrimaryHover = rgba(128, 235, 255, 1)
    public static let desktopDarkButtonColorBackgroundSecondary = rgba(43, 42, 51, 1)
    public static let desktopDarkButtonColorBackgroundSecondaryActive = rgba(91, 91, 102, 1)
    public static let desktopDarkButtonColorBackgroundSecondaryDisabled = rgba(43, 42, 51, 0.4)
    public static let desktopDarkButtonColorBackgroundSecondaryHover = rgba(82, 82, 94, 1)
    public static let desktopDarkIconColorCritical = rgba(255, 154, 162, 1)
    public static let desktopDarkIconColorDefault = rgba(251, 251, 254, 1)
    public static let desktopDarkIconColorEtpShieldGradientType = linear
    public static let desktopDarkIconColorEtpShieldOpacity = 1
    public static let desktopDarkIconColorEtpShieldStops0Color = rgba(203, 158, 255, 1)
    public static let desktopDarkIconColorEtpShieldStops0Position = 0
    public static let desktopDarkIconColorEtpShieldStops1Color = rgba(0, 221, 255, 1)
    public static let desktopDarkIconColorEtpShieldStops1Position = 1
    public static let desktopDarkIconColorInformation = rgba(128, 235, 255, 1)
    public static let desktopDarkIconColorSuccess = rgba(84, 255, 189, 1)
    public static let desktopDarkIconColorWarning = rgba(255, 189, 79, 1)
    public static let desktopDarkLayerColorLayer1 = rgba(28, 27, 34, 1)
    public static let desktopDarkLayerColorLayer2 = rgba(43, 42, 51, 1)
    public static let desktopDarkLayerColorLayer3 = rgba(66, 65, 77, 1)
    public static let desktopDarkLayerColorScrim = rgba(91, 91, 102, 0.45)
    public static let desktopDarkTextColorDisabled = rgba(251, 251, 254, 0.4)
    public static let desktopDarkTextColorError = rgba(255, 154, 162, 1)
    public static let desktopDarkTextColorInverted = rgba(21, 20, 26, 1)
    public static let desktopDarkTextColorLink = rgba(0, 221, 255, 1)
    public static let desktopDarkTextColorPrimary = rgba(251, 251, 254, 1)
    public static let desktopDarkTextColorSecondary = rgba(207, 207, 216, 1)
    public static let desktopLightBorderColorContextMenu = rgba(207, 207, 216, 1)
    public static let desktopLightBorderColorModal = rgba(240, 240, 244, 1)
    public static let desktopLightBorderColorPanel = rgba(240, 240, 244, 1)
    public static let desktopLightBorderColorUiComponent = rgba(143, 143, 157, 1)
    public static let desktopLightBorderColorZapGradientType = linear
    public static let desktopLightBorderColorZapOpacity = 1
    public static let desktopLightBorderColorZapStops0Color = rgba(144, 89, 255, 1)
    public static let desktopLightBorderColorZapStops0Position = 0
    public static let desktopLightBorderColorZapStops1Color = rgba(255, 74, 162, 1)
    public static let desktopLightBorderColorZapStops1Position = 0.52
    public static let desktopLightBorderColorZapStops2Color = rgba(255, 189, 79, 1)
    public static let desktopLightBorderColorZapStops2Position = 1
    public static let desktopLightButtonColorBackgroundError = rgba(226, 40, 80, 1)
    public static let desktopLightButtonColorBackgroundErrorActive = rgba(129, 2, 32, 1)
    public static let desktopLightButtonColorBackgroundErrorDisabled = rgba(226, 40, 80, 0.4)
    public static let desktopLightButtonColorBackgroundErrorHover = rgba(197, 0, 66, 1)
    public static let desktopLightButtonColorBackgroundPrimary = rgba(0, 96, 223, 1)
    public static let desktopLightButtonColorBackgroundPrimaryActive = rgba(5, 64, 150, 1)
    public static let desktopLightButtonColorBackgroundPrimaryDisabled = rgba(0, 96, 223, 0.4)
    public static let desktopLightButtonColorBackgroundPrimaryHover = rgba(2, 80, 187, 1)
    public static let desktopLightButtonColorBackgroundSecondary = rgba(240, 240, 244, 1)
    public static let desktopLightButtonColorBackgroundSecondaryActive = rgba(207, 207, 216, 1)
    public static let desktopLightButtonColorBackgroundSecondaryDisabled = rgba(240, 240, 244, 0.4)
    public static let desktopLightButtonColorBackgroundSecondaryHover = rgba(224, 224, 230, 1)
    public static let desktopLightIconColorCritical = rgba(226, 40, 80, 1)
    public static let desktopLightIconColorDefault = rgba(91, 91, 102, 1)
    public static let desktopLightIconColorEtpGradientType = linear
    public static let desktopLightIconColorEtpOpacity = 1
    public static let desktopLightIconColorEtpStops0Color = rgba(144, 89, 255, 1)
    public static let desktopLightIconColorEtpStops0Position = 0
    public static let desktopLightIconColorEtpStops1Color = rgba(2, 80, 187, 1)
    public static let desktopLightIconColorEtpStops1Position = 1
    public static let desktopLightIconColorInformation = rgba(0, 144, 237, 1)
    public static let desktopLightIconColorSuccess = rgba(42, 195, 162, 1)
    public static let desktopLightIconColorWarning = rgba(255, 164, 54, 1)
    public static let desktopLightLayerColor100 = rgba(240, 240, 244, 1)
    public static let desktopLightLayerColor200 = rgba(249, 249, 251, 1)
    public static let desktopLightLayerColor300 = rgba(255, 255, 255, 1)
    public static let desktopLightLayerColorScrim = rgba(91, 91, 102, 0.45)
    public static let desktopLightTextColorDisabled = rgba(21, 20, 26, 0.4)
    public static let desktopLightTextColorError = rgba(197, 0, 66, 1)
    public static let desktopLightTextColorInverted = rgba(251, 251, 254, 1)
    public static let desktopLightTextColorLink = rgba(0, 96, 223, 1)
    public static let desktopLightTextColorPrimary = rgba(21, 20, 26, 1)
    public static let desktopLightTextColorSecondary = rgba(91, 91, 102, 1)
    public static let lightElevationShadow01Color = rgba(58, 57, 68, 0.2)
    public static let lightElevationShadow01OffsetX = 0
    public static let lightElevationShadow01OffsetY = 2
    public static let lightElevationShadow01Radius = 6
    public static let lightElevationShadow01Spread = 0
    public static let lightElevationShadow01Type = dropShadow
    public static let lightElevationShadow02Color = rgba(58, 57, 68, 0.2)
    public static let lightElevationShadow02OffsetX = 0
    public static let lightElevationShadow02OffsetY = 2
    public static let lightElevationShadow02Radius = 14
    public static let lightElevationShadow02Spread = 0
    public static let lightElevationShadow02Type = dropShadow
    public static let lightElevationShadow03Color = rgba(58, 57, 68, 0.2)
    public static let lightElevationShadow03OffsetX = 0
    public static let lightElevationShadow03OffsetY = 1
    public static let lightElevationShadow03Radius = 2
    public static let lightElevationShadow03Spread = 0
    public static let lightElevationShadow03Type = dropShadow
    public static let lightElevationShadowSwitchColor = rgba(58, 57, 68, 0.2)
    public static let lightElevationShadowSwitchOffsetX = 0
    public static let lightElevationShadowSwitchOffsetY = 0
    public static let lightElevationShadowSwitchRadius = 2
    public static let lightElevationShadowSwitchSpread = 0
    public static let lightElevationShadowSwitchType = dropShadow
    public static let lightElevationShadowTab0Color = rgba(128, 128, 142, 0.5)
    public static let lightElevationShadowTab0OffsetX = 0
    public static let lightElevationShadowTab0OffsetY = 0
    public static let lightElevationShadowTab0Radius = 4
    public static let lightElevationShadowTab0Spread = 0
    public static let lightElevationShadowTab0Type = dropShadow
    public static let lightElevationShadowTab1Color = rgba(128, 128, 142, 0.9)
    public static let lightElevationShadowTab1OffsetX = 0
    public static let lightElevationShadowTab1OffsetY = 0
    public static let lightElevationShadowTab1Radius = 1
    public static let lightElevationShadowTab1Spread = 0
    public static let lightElevationShadowTab1Type = dropShadow
=======
    public static let bordersDashedOutsideDashPattern = 5,5,3,3
    public static let bordersDashedOutsideStroke = rgba(0, 0, 0, 1)
    public static let bordersDashedOutsideStrokeAlign = outside
    public static let bordersDashedOutsideStrokeCap = none
    public static let bordersDashedOutsideStrokeJoin = miter
    public static let bordersDashedOutsideStrokeMiterLimit = 4
    public static let bordersDashedOutsideStrokeWeight = 5
    public static let bordersSingleDashPattern = 
    public static let bordersSingleStroke = rgba(0, 0, 0, 1)
    public static let bordersSingleStrokeAlign = inside
    public static let bordersSingleStrokeCap = none
    public static let bordersSingleStrokeJoin = miter
    public static let bordersSingleStrokeMiterLimit = 4
    public static let bordersSingleStrokeWeight = 5
    public static let bordersSingleStyleDashPattern = 
    public static let bordersSingleStyleStroke = rgba(4, 74, 255, 1)
    public static let bordersSingleStyleStrokeAlign = inside
    public static let bordersSingleStyleStrokeCap = none
    public static let bordersSingleStyleStrokeJoin = miter
    public static let bordersSingleStyleStrokeMiterLimit = 4
    public static let bordersSingleStyleStrokeWeight = 5
    public static let bordersUnsupportedMultipleBordersDashPattern = 5,10
    public static let bordersUnsupportedMultipleBordersStroke = rgba(255, 230, 0, 1)
    public static let bordersUnsupportedMultipleBordersStrokeAlign = inside
    public static let bordersUnsupportedMultipleBordersStrokeCap = none
    public static let bordersUnsupportedMultipleBordersStrokeJoin = miter
    public static let bordersUnsupportedMultipleBordersStrokeMiterLimit = 4
    public static let bordersUnsupportedMultipleBordersStrokeWeight = 5
    public static let breakpointsLg = 1280
    public static let breakpointsMd = 1024
    public static let breakpointsSm = 768
    public static let colorColorsMultipleFills0 = UIColor(red: 0.251, green: 1.000, blue: 0.729, alpha: 1)
    public static let colorColorsMultipleFills1 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.1)
    public static let colorColorsSingleBlue = UIColor(red: 0.016, green: 0.290, blue: 1.000, alpha: 1)
    public static let colorColorsSpecialCharacters = UIColor(red: 0.251, green: 0.875, blue: 0.314, alpha: 1) /* Emoji */
    public static let colorColorsSpecialCharactersNderung = UIColor(red: 0.204, green: 0.337, blue: 0.686, alpha: 1)
    public static let effectBackgroundBlurRadius = 4
    public static let effectBackgroundBlurType = backgroundBlur
    public static let effectDropShadowSingleColor = rgba(0, 0, 0, 0.25)
    public static let effectDropShadowSingleOffsetX = 0
    public static let effectDropShadowSingleOffsetY = 4
    public static let effectDropShadowSingleRadius = 4
    public static let effectDropShadowSingleSpread = 0
    public static let effectDropShadowSingleType = dropShadow
    public static let effectInnerShadowMultiple0Color = rgba(0, 0, 0, 0.25)
    public static let effectInnerShadowMultiple0OffsetX = 0
    public static let effectInnerShadowMultiple0OffsetY = 4
    public static let effectInnerShadowMultiple0Radius = 4
    public static let effectInnerShadowMultiple0Spread = 0
    public static let effectInnerShadowMultiple0Type = innerShadow
    public static let effectInnerShadowMultiple1Color = rgba(0, 0, 0, 1)
    public static let effectInnerShadowMultiple1OffsetX = 10
    public static let effectInnerShadowMultiple1OffsetY = 100
    public static let effectInnerShadowMultiple1Radius = 1
    public static let effectInnerShadowMultiple1Spread = 0.5
    public static let effectInnerShadowMultiple1Type = innerShadow
    public static let effectInnerShadowMultiple2Color = rgba(0, 0, 0, 0.25)
    public static let effectInnerShadowMultiple2OffsetX = -4
    public static let effectInnerShadowMultiple2OffsetY = 2
    public static let effectInnerShadowMultiple2Radius = 3
    public static let effectInnerShadowMultiple2Spread = 11
    public static let effectInnerShadowMultiple2Type = innerShadow
    public static let effectLayerBlurRadius = 4
    public static let effectLayerBlurType = layerBlur
    public static let fontBodyExtraBoldCondensedItalicFontFamily = "Akzidenz-Grotesk Pro"
    public static let fontBodyExtraBoldCondensedItalicFontSize = "12"
    public static let fontBodyExtraBoldCondensedItalicFontStretch = "condensed"
    public static let fontBodyExtraBoldCondensedItalicFontStyle = "italic"
    public static let fontBodyExtraBoldCondensedItalicFontStyleOld = "Extra Bold Condensed Italic"
    public static let fontBodyExtraBoldCondensedItalicFontWeight = "800"
    public static let fontBodyExtraBoldCondensedItalicLetterSpacing = "0"
    public static let fontBodyExtraBoldCondensedItalicLineHeight = "normal"
    public static let fontBodyExtraBoldCondensedItalicParagraphIndent = "0"
    public static let fontBodyExtraBoldCondensedItalicParagraphSpacing = "0"
    public static let fontBodyExtraBoldCondensedItalicTextCase = "none"
    public static let fontBodyExtraBoldCondensedItalicTextDecoration = "none"
    public static let fontBodyH3FontFamily = "Akzidenz-Grotesk Pro"
    public static let fontBodyH3FontSize = "20"
    public static let fontBodyH3FontStretch = "condensed"
    public static let fontBodyH3FontStyle = "normal"
    public static let fontBodyH3FontStyleOld = "Bold Condensed"
    public static let fontBodyH3FontWeight = "700"
    public static let fontBodyH3LetterSpacing = "2"
    public static let fontBodyH3LineHeight = "160"
    public static let fontBodyH3ParagraphIndent = "5"
    public static let fontBodyH3ParagraphSpacing = "8"
    public static let fontBodyH3TextCase = "uppercase"
    public static let fontBodyH3TextDecoration = "none"
    public static let fontBodyH4StrikeThroughFontFamily = "Roboto"
    public static let fontBodyH4StrikeThroughFontSize = "16"
    public static let fontBodyH4StrikeThroughFontStretch = "normal"
    public static let fontBodyH4StrikeThroughFontStyle = "italic"
    public static let fontBodyH4StrikeThroughFontStyleOld = "Medium Italic"
    public static let fontBodyH4StrikeThroughFontWeight = "500"
    public static let fontBodyH4StrikeThroughLetterSpacing = "0"
    public static let fontBodyH4StrikeThroughLineHeight = "normal"
    public static let fontBodyH4StrikeThroughParagraphIndent = "0"
    public static let fontBodyH4StrikeThroughParagraphSpacing = "0"
    public static let fontBodyH4StrikeThroughTextCase = "none"
    public static let fontBodyH4StrikeThroughTextDecoration = "line-through"
    public static let fontBodyItalicFontFamily = "Roboto"
    public static let fontBodyItalicFontSize = "12"
    public static let fontBodyItalicFontStretch = "normal"
    public static let fontBodyItalicFontStyle = "italic"
    public static let fontBodyItalicFontStyleOld = "Italic"
    public static let fontBodyItalicFontWeight = "400"
    public static let fontBodyItalicLetterSpacing = "0"
    public static let fontBodyItalicLineHeight = "normal"
    public static let fontBodyItalicParagraphIndent = "0"
    public static let fontBodyItalicParagraphSpacing = "0"
    public static let fontBodyItalicTextCase = "none"
    public static let fontBodyItalicTextDecoration = "none"
    public static let fontBodyMediumExtendedItalicFontFamily = "Akzidenz-Grotesk Pro"
    public static let fontBodyMediumExtendedItalicFontSize = "20"
    public static let fontBodyMediumExtendedItalicFontStretch = "expanded"
    public static let fontBodyMediumExtendedItalicFontStyle = "italic"
    public static let fontBodyMediumExtendedItalicFontStyleOld = "Medium Extended Italic"
    public static let fontBodyMediumExtendedItalicFontWeight = "500"
    public static let fontBodyMediumExtendedItalicLetterSpacing = "0"
    public static let fontBodyMediumExtendedItalicLineHeight = "normal"
    public static let fontBodyMediumExtendedItalicParagraphIndent = "0"
    public static let fontBodyMediumExtendedItalicParagraphSpacing = "0"
    public static let fontBodyMediumExtendedItalicTextCase = "none"
    public static let fontBodyMediumExtendedItalicTextDecoration = "none"
    public static let fontBodySuperFontFamily = "Akzidenz-Grotesk Pro"
    public static let fontBodySuperFontSize = "22"
    public static let fontBodySuperFontStretch = "normal"
    public static let fontBodySuperFontStyle = "normal"
    public static let fontBodySuperFontStyleOld = "Super"
    public static let fontBodySuperFontWeight = "900"
    public static let fontBodySuperLetterSpacing = "0"
    public static let fontBodySuperLineHeight = "normal"
    public static let fontBodySuperParagraphIndent = "0"
    public static let fontBodySuperParagraphSpacing = "0"
    public static let fontBodySuperTextCase = "none"
    public static let fontBodySuperTextDecoration = "none"
    public static let gradientGradientMultiple0GradientType = linear
    public static let gradientGradientMultiple0Opacity = 1
    public static let gradientGradientMultiple0Stops0Color = rgba(255, 184, 0, 1)
    public static let gradientGradientMultiple0Stops0Position = 0
    public static let gradientGradientMultiple0Stops1Color = rgba(255, 184, 0, 1)
    public static let gradientGradientMultiple0Stops1Position = 1
    public static let gradientGradientMultiple1GradientType = radial
    public static let gradientGradientMultiple1Opacity = 1
    public static let gradientGradientMultiple1Stops0Color = rgba(255, 255, 255, 1)
    public static let gradientGradientMultiple1Stops0Position = 0
    public static let gradientGradientMultiple1Stops1Color = rgba(255, 255, 255, 1)
    public static let gradientGradientMultiple1Stops1Position = 1
    public static let gradientGradientMultiple2GradientType = angular
    public static let gradientGradientMultiple2Opacity = 1
    public static let gradientGradientMultiple2Stops0Color = rgba(207, 48, 48, 1)
    public static let gradientGradientMultiple2Stops0Position = 0
    public static let gradientGradientMultiple2Stops1Color = rgba(255, 255, 255, 1)
    public static let gradientGradientMultiple2Stops1Position = 1
    public static let gradientGradientMultiple3GradientType = diamond
    public static let gradientGradientMultiple3Opacity = 1
    public static let gradientGradientMultiple3Stops0Color = rgba(74, 79, 204, 1)
    public static let gradientGradientMultiple3Stops0Position = 0
    public static let gradientGradientMultiple3Stops1Color = rgba(255, 255, 255, 1)
    public static let gradientGradientMultiple3Stops1Position = 1
    public static let gradientGradientSingleWithMultipleColorStopsGradientType = radial
    public static let gradientGradientSingleWithMultipleColorStopsOpacity = 1
    public static let gradientGradientSingleWithMultipleColorStopsStops0Color = rgba(255, 184, 0, 1)
    public static let gradientGradientSingleWithMultipleColorStopsStops0Position = 0
    public static let gradientGradientSingleWithMultipleColorStopsStops1Color = rgba(255, 138, 0, 1)
    public static let gradientGradientSingleWithMultipleColorStopsStops1Position = 0.34
    public static let gradientGradientSingleWithMultipleColorStopsStops2Color = rgba(255, 46, 0, 1)
    public static let gradientGradientSingleWithMultipleColorStopsStops2Position = 0.65
    public static let gradientGradientSingleWithMultipleColorStopsStops3Color = rgba(255, 0, 0, 1)
    public static let gradientGradientSingleWithMultipleColorStopsStops3Position = 1
    public static let gridMultiple0Alignment = max
    public static let gridMultiple0Count = 7
    public static let gridMultiple0GutterSize = 20
    public static let gridMultiple0Offset = 3
    public static let gridMultiple0Pattern = columns
    public static let gridMultiple0SectionSize = 1
    public static let gridMultiple1Alignment = center
    public static let gridMultiple1Count = 6
    public static let gridMultiple1GutterSize = 20
    public static let gridMultiple1Pattern = columns
    public static let gridMultiple1SectionSize = 12
    public static let gridMultiple2Alignment = stretch
    public static let gridMultiple2Count = 5
    public static let gridMultiple2GutterSize = 20
    public static let gridMultiple2Offset = 10
    public static let gridMultiple2Pattern = columns
    public static let gridMultiple3Alignment = min
    public static let gridMultiple3Count = 4
    public static let gridMultiple3GutterSize = 20
    public static let gridMultiple3Offset = 13
    public static let gridMultiple3Pattern = columns
    public static let gridMultiple3SectionSize = 34
    public static let gridMultiple4Alignment = max
    public static let gridMultiple4Count = 5
    public static let gridMultiple4GutterSize = 20
    public static let gridMultiple4Offset = 10
    public static let gridMultiple4Pattern = rows
    public static let gridMultiple4SectionSize = 8
    public static let gridMultiple5Alignment = center
    public static let gridMultiple5Count = 4
    public static let gridMultiple5GutterSize = 10
    public static let gridMultiple5Pattern = rows
    public static let gridMultiple5SectionSize = 8
    public static let gridMultiple6Alignment = min
    public static let gridMultiple6Count = 3
    public static let gridMultiple6GutterSize = 20
    public static let gridMultiple6Offset = 10
    public static let gridMultiple6Pattern = rows
    public static let gridMultiple6SectionSize = 8
    public static let gridMultiple7Pattern = grid
    public static let gridMultiple7SectionSize = 8
    public static let gridSingleAlignment = center
    public static let gridSingleCount = 5
    public static let gridSingleGutterSize = 20
    public static let gridSinglePattern = columns
    public static let gridSingleSectionSize = 11
    public static let motionDissolveDuration = 0.45
    public static let motionDissolveEasing = cubic-bezier
    public static let motionDissolveEasingFunctionX1 = 0.6968395709991455
    public static let motionDissolveEasingFunctionX2 = 0.06683959811925888
    public static let motionDissolveEasingFunctionY1 = 0.052326660603284836
    public static let motionDissolveEasingFunctionY2 = 0.9323266744613647
    public static let motionDissolveType = dissolve
    public static let motionMoveInDirection = left
    public static let motionMoveInDuration = 0.5
    public static let motionMoveInEasing = ease-in
    public static let motionMoveInEasingFunctionX1 = 0.41999998688697815
    public static let motionMoveInEasingFunctionX2 = 1
    public static let motionMoveInEasingFunctionY1 = 0
    public static let motionMoveInEasingFunctionY2 = 1
    public static let motionMoveInType = move_in
    public static let motionPushDirection = left
    public static let motionPushDuration = 0.5
    public static let motionPushEasing = ease-in-back
    public static let motionPushEasingFunctionX1 = 0.30000001192092896
    public static let motionPushEasingFunctionX2 = 0.699999988079071
    public static let motionPushEasingFunctionY1 = -0.05000000074505806
    public static let motionPushEasingFunctionY2 = -0.5
    public static let motionPushType = push
    public static let motionSmartDuration = 0.5
    public static let motionSmartEasing = linear
    public static let motionSmartEasingFunctionX1 = 0
    public static let motionSmartEasingFunctionX2 = 1
    public static let motionSmartEasingFunctionY1 = 0
    public static let motionSmartEasingFunctionY2 = 1
    public static let motionSmartType = smart_animate
    public static let radiiMixedRadiiBottomLeft = 20
    public static let radiiMixedRadiiBottomRight = 15
    public static let radiiMixedRadiiTopLeft = 5.5
    public static let radiiMixedRadiiTopRight = 10
    public static let radiiMixedRadiusType = mixed
    public static let radiiMixedSmoothing = 0
    public static let radiiSmoothingRadiiBottomLeft = 10
    public static let radiiSmoothingRadiiBottomRight = 10
    public static let radiiSmoothingRadiiTopLeft = 10
    public static let radiiSmoothingRadiiTopRight = 10
    public static let radiiSmoothingRadius = 10
    public static let radiiSmoothingRadiusType = single
    public static let radiiSmoothingSmoothing = 0.75
    public static let radius5RadiiBottomLeft = 5
    public static let radius5RadiiBottomRight = 5
    public static let radius5RadiiTopLeft = 5
    public static let radius5RadiiTopRight = 5
    public static let radius5Radius = 5
    public static let radius5RadiusType = single
    public static let radius5Smoothing = 0
    public static let sizes32 = 32.72 /* 32.72px spacer component */
    public static let sizes40 = 40
    public static let sizes60 = 60
    public static let sizes80 = 80
    public static let sizesFrame = 32
    public static let sizesInVariant120 = 120
    public static let sizesInVariant60 = 60
    public static let sizesInVariant90 = 90
    public static let sizesPlainToken = 200
    public static let sizesRect = 32
    public static let sizesShapeInComponent = 32 /* Should use 32px not 20 from inside shape */
    public static let sizesTokenInFrame = 200
    public static let sizesTokenInGroup = 200
    public static let spacing10Bottom = 10
    public static let spacing10Left = 10
    public static let spacing10Right = 10
    public static let spacing10Top = 10
    public static let spacingMixedBottom = 30
    public static let spacingMixedLeft = 20
    public static let spacingMixedRight = 20
    public static let spacingMixedTop = 10
    public static let spacingTopBottom = 0
    public static let spacingTopLeft = 0
    public static let spacingTopRight = 0
    public static let spacingTopTop = 10
>>>>>>> c59d42e64e1946492a29b26eb85f5636e8a20461
}
